diff --git a/Dockerfile b/Dockerfile
new file mode 100644
index 0000000..092869b
--- /dev/null
+++ b/Dockerfile
@@ -0,0 +1,20 @@
+
+FROM google/golang:stable
+# Godep for vendoring
+RUN go get github.com/tools/godep
+# Recompile the standard library without CGO
+RUN CGO_ENABLED=0 go install -a std
+
+MAINTAINER ink.splatters@pm.me
+ENV APP_DIR $GOPATH/Users/r2d2/dev/go-redis-k8s-poc
+ 
+# Set the entrypoint 
+ENTRYPOINT ["/opt/app/go-redis-k8s-poc"]
+ADD . $APP_DIR
+
+# Compile the binary and statically link
+RUN mkdir /opt/app
+RUN cd $APP_DIR
+RUN cd $APP_DIR && CGO_ENABLED=0 godep go build -o /opt/app/go-redis-k8s-poc -ldflags '-d -w -s'
+
+EXPOSE 8080
diff --git a/bootstrap.sh b/bootstrap.sh
new file mode 100755
index 0000000..0aa6d72
--- /dev/null
+++ b/bootstrap.sh
@@ -0,0 +1,99 @@
+#!/bin/bash
+
+set -e
+####################################################################################################
+
+#l=(go kind k9s kubectl redis) # redis included just to test rapidly, without k8s
+tools=(go kind k9s kubectl)
+
+cmd=(install)
+pkg_mgr=brew
+
+####################################################################################################
+
+if [[ $(uname) != "Darwin" ]]; then
+	# shellcheck disable=SC2046
+	# shellcheck disable=SC2086
+	echo WARN: $(uname) is not supported for installing the tools. You are on your own.
+	echo "      the tools expected: ${tools[*]}"
+	echo "      cluster bootstrap still probably would work"
+	tools=()
+	pkg_mgr=
+	cmd=
+fi
+
+####################################################################################################
+
+function cecho() {
+	# shellcheck disable=SC2068
+	echo $@
+}
+
+function manually() {
+	echo ERROR: $1 is missing. Please install it manually.
+}
+function prep() {
+	if ! command -v docker >/dev/null 2>&1; then
+		manually docker
+		exit 1
+	fi
+
+	for arg in "$@"; do
+		if [[ $arg =~ reinstall ]]; then
+			cmd=(reinstall)
+		else
+			# shellcheck disable=SC2206
+			cmd+=($arg)
+		fi
+	done
+}
+
+function info() {
+	# shellcheck disable=SC2046
+	echo -e OS: $(uname)
+	echo -e Package manager: $pkg_mgr
+	echo -e Command: ${cmd[*]}
+	echo -e
+}
+
+function runp() {
+	read -e -p "-- $* [press 'n' to skip]" -n 1 -r
+	REPLY=${REPLY:-Y}
+	if [[ $REPLY =~ ^[Yy]$ ]]; then
+		set -x
+		# shellcheck disable=SC2048
+		$*
+		set +x
+	fi
+	echo
+}
+
+
+####################################################################################################
+
+# shellcheck disable=SC2119
+# shellcheck disable=SC2068
+prep $@
+info
+
+# shellcheck disable=SC2154
+# shellcheck disable=SC2128
+
+if [[ $(uname) == "Darwin" ]]; then
+  runp $pkg_mgr ${cmd[*]} ${tools[*]}
+fi
+
+run go install github.com/dahernan/godockerize@latest
+
+####################################################################################################
+
+script_dir=$(dirname "${BASH_SOURCE[0]}")/k8s
+namespace=go-redis-k8s-poc
+
+set -x
+kind create cluster "--config=$script_dir/kind.yaml"
+kubectl cluster-info --context kind-kind
+
+runp kubectl apply -f "$script_dir/$namespace.yaml"
+
+echo Bootstrap complete
\ No newline at end of file
diff --git a/deploy.sh b/deploy.sh
new file mode 100755
index 0000000..8d3d6f2
--- /dev/null
+++ b/deploy.sh
@@ -0,0 +1,22 @@
+#!/bin/bash
+
+script_dir=$(dirname "${BASH_SOURCE[0]}")/k8s
+namespace=go-redis-k8s-poc
+redisver=6.2.6
+
+set -e
+set -x
+
+# redis
+
+pushd $script_dir/redis || true
+
+docker pull redis:$redisver
+kind load docker-image redis:$redisver
+
+kubectl apply -f redis-namespace.yaml
+kubectl apply -f redis-config.yaml --namespace=redis
+kubectl apply -f redis-service.yaml --namespace=redis
+kubectl apply -f redis-deployment.yaml --namespace=redis
+
+popd || true
\ No newline at end of file
diff --git a/go.mod b/go.mod
index c7e64a8..65e4948 100644
--- a/go.mod
+++ b/go.mod
@@ -1,3 +1,10 @@
 module github.com/ink-splatters/go-redis-k8s-poc
 
 go 1.17
+
+require github.com/go-redis/redis/v8 v8.11.4
+
+require (
+	github.com/cespare/xxhash/v2 v2.1.2 // indirect
+	github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect
+)
diff --git a/k8s/deployment.yaml b/k8s/deployment.yaml
new file mode 100644
index 0000000..1488712
--- /dev/null
+++ b/k8s/deployment.yaml
@@ -0,0 +1,14 @@
+apiVersion: apps/v1
+kind: Deployment
+metadata:
+  name: not-a-face-book
+  labels:
+    app: not-a-face-book
+spec:
+  replicas: 2
+  selector:
+  containers:
+    - name: not-a-face-book
+      image: "not-a-facebook:0.1"
+      ports:
+        - containerPort: 8080
\ No newline at end of file
diff --git a/k8s/go-redis-k8s-poc.yaml b/k8s/go-redis-k8s-poc.yaml
new file mode 100644
index 0000000..fdf0277
--- /dev/null
+++ b/k8s/go-redis-k8s-poc.yaml
@@ -0,0 +1,6 @@
+kind: Namespace
+apiVersion: v1
+metadata:
+  name: go-redis-k8s-poc
+  labels:
+    name: go-redis-k8s-poc
\ No newline at end of file
diff --git a/k8s/kind.yaml b/k8s/kind.yaml
new file mode 100644
index 0000000..6f88ab3
--- /dev/null
+++ b/k8s/kind.yaml
@@ -0,0 +1,7 @@
+kind: Cluster
+apiVersion: kind.x-k8s.io/v1alpha4
+networking:
+  ipFamily: ipv6
+  apiServerAddress: 127.0.0.1
+#  podSubnet: "10.244.0.0/16"
+#  serviceSubnet: "10.96.0.0/12"
\ No newline at end of file
diff --git a/k8s/redis/redis-config.yaml b/k8s/redis/redis-config.yaml
new file mode 100644
index 0000000..8e156b4
--- /dev/null
+++ b/k8s/redis/redis-config.yaml
@@ -0,0 +1,16 @@
+# https://developpaper.com/deploying-single-node-redis-in-kubernetes-environment/
+kind: ConfigMap
+apiVersion: v1
+metadata:
+  name: redis-config
+  namespace: redis
+  labels:
+    app: redis-626
+data:
+  redis.conf: |-
+    dir /data
+    port 6379
+    bind 0.0.0.0
+    appendonly yes
+    protected-mode no
+    pidfile /data/redis-6379.pid
diff --git a/k8s/redis/redis-deployment.yaml b/k8s/redis/redis-deployment.yaml
new file mode 100644
index 0000000..26d3345
--- /dev/null
+++ b/k8s/redis/redis-deployment.yaml
@@ -0,0 +1,82 @@
+# https://developpaper.com/deploying-single-node-redis-in-kubernetes-environment/
+---
+apiVersion: apps/v1
+kind: Deployment
+metadata:
+  name: redis
+  namespace: redis
+  labels:
+    app: redis
+spec:
+  replicas: 1
+  selector:
+    matchLabels:
+      app: redis
+  template:
+    metadata:
+      labels:
+        app: redis
+    spec:
+      #Initialize the system, modify the system configuration, and solve the warning information when redis starts
+      initContainers:
+        - name: system-init
+          image: busybox:1.32
+          imagePullPolicy: IfNotPresent
+          command:
+            - "sh"
+            - "-c"
+            - "echo 2048 > /proc/sys/net/core/somaxconn && echo never > /sys/kernel/mm/transparent_hugepage/enabled"
+          securityContext:
+            privileged: true
+            runAsUser: 0
+          volumeMounts:
+            - name: sys
+              mountPath: /sys
+      containers:
+        - name: redis
+          image: redis:6.2.6
+          command:
+            - "sh"
+            - "-c"
+            - "redis-server /usr/local/etc/redis/redis.conf"
+          ports:
+            - containerPort: 6379
+          resources:
+            limits:
+              cpu: 1000m
+              memory: 1024Mi
+            requests:
+              cpu: 1000m
+              memory: 1024Mi
+          livenessProbe:
+            tcpSocket:
+              port: 6379
+            initialDelaySeconds: 300
+            timeoutSeconds: 1
+            periodSeconds: 10
+            successThreshold: 1
+            failureThreshold: 3
+          readinessProbe:
+            tcpSocket:
+              port: 6379
+            initialDelaySeconds: 5
+            timeoutSeconds: 1
+            periodSeconds: 10
+            successThreshold: 1
+            failureThreshold: 3
+          volumeMounts:
+            - name: data
+              mountPath: /data
+            - name: config
+              mountPath: /usr/local/etc/redis/redis.conf
+              subPath: redis.conf
+      volumes:
+        - name: data
+          persistentVolumeClaim:
+            claimName: redis
+        - name: config
+          configMap:
+            name: redis-config
+        - name: sys
+          hostPath:
+            path: /sys
\ No newline at end of file
diff --git a/k8s/redis/redis-namespace.yaml b/k8s/redis/redis-namespace.yaml
new file mode 100644
index 0000000..d7ad9e3
--- /dev/null
+++ b/k8s/redis/redis-namespace.yaml
@@ -0,0 +1,6 @@
+kind: Namespace
+apiVersion: v1
+metadata:
+  name: redis
+  labels:
+    name: redis
\ No newline at end of file
diff --git a/k8s/redis/redis-service.yaml b/k8s/redis/redis-service.yaml
new file mode 100644
index 0000000..8836736
--- /dev/null
+++ b/k8s/redis/redis-service.yaml
@@ -0,0 +1,15 @@
+# https://developpaper.com/deploying-single-node-redis-in-kubernetes-environment/
+---
+apiVersion: v1
+kind: Service
+metadata:
+  name: redis
+  labels:
+    app: redis
+spec:
+  type: ClusterIP
+  ports:
+    - name: redis
+      port: 6379
+  selector:
+    app: redis
\ No newline at end of file
diff --git a/k8s/service.yaml b/k8s/service.yaml
new file mode 100644
index 0000000..4606915
--- /dev/null
+++ b/k8s/service.yaml
@@ -0,0 +1,12 @@
+apiVersion: v1
+kind: Service
+metadata:
+  name: not-a-facebook
+  labels:
+    app: not-a-facebook
+spec:
+  selector:
+    app: not-a-facebook
+  ports:
+    - port: 8080
+      targetPort: 8080
\ No newline at end of file
diff --git a/main.go b/main.go
index 1c67ada..2546790 100644
--- a/main.go
+++ b/main.go
@@ -1,6 +1,16 @@
 package main
 
+import (
+	_ "context"
+	_ "github.com/go-redis/redis/v8"
+)
+
 func main() {
 
+	//ctx := context.Background()
+
+	//rdb := redis.NewClient(&redis.Options{
+	//	Addr: ":6379",
+	//})
 
 }
diff --git a/person.go b/person.go
new file mode 100644
index 0000000..ea4df1a
--- /dev/null
+++ b/person.go
@@ -0,0 +1,15 @@
+package main
+
+import (
+	//"context"
+	_ "github.com/go-redis/redis/v8"
+)
+
+type Person struct {
+	FirstName  string   `redis:"person:first"`
+	SecondName string   `redis:"person:second"`
+	Age        int      `redis:"person:age"`
+	Phone	   string 	`redis:"person:phone"`
+	Address	   string	 `redis:"person:address"`
+	Ignored    struct{} `redis:"-"` // https://github.com/go-redis/redis/blob/master/example/scan-struct/main.go
+}
